# -*- coding: utf-8 -*-
"""2015312904_KwonJoonWoo_EVAL

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1a8qP_JwS8P4oKkwDardqpRRSE0RPojZB
"""

import json
from sklearn.metrics import confusion_matrix, accuracy_score
from sklearn.metrics import precision_score, recall_score, f1_score

# Setting 1 - File I/O:
path = './Evaluation.json'
with open(path,'r') as f:
  json_data = json.load(f)

keylist = json_data.keys()
newpath = './2015312904_KwonJoonWoo_EVAL.txt'
f = open(newpath,'w')

# ----------------------- Main code -----------------------
# Setting 1: Parameters and list

datalist_true = []
datalist_pred = []
num = 4  #소수점 네번째 자리부터 버림

# 데이터 분류
for i in keylist:
  if i == 'predict':
    for temp in json_data[i]:
      datalist_pred.append(temp)
  elif i == 'label':
    for temp in json_data[i]:
      datalist_true.append(temp)
  else:
    continue

# Confusion matrix
f.write('Confusion matrix\n')

mat_confusion = confusion_matrix(datalist_true,datalist_pred)
for temp in mat_confusion:
  for i in temp:
    f.write('{}\t'.format(i))
  f.write("\n")

# Round down to the fourth digit after the decimal point
def digits(digits,num):
  new_digits = digits
  for i in range(0,num):
    new_digits = new_digits * 10

  temp = new_digits - int(new_digits)
  final = new_digits - temp

  for i in range(0,num):
    final = final /10
  final = round(final,num)

  return final

# Accuracy
acr = accuracy_score(datalist_true, datalist_pred)
new_acr = digits(acr*100,num)

f.write("\nAccuracy : {}%\n".format(new_acr))

# Macro averaging precision
mac_precision = precision_score(datalist_true, datalist_pred, average = 'macro')
mac_precision = digits(mac_precision*100,num)
f.write('\nMacro averaging precision : {}%\n'.format(mac_precision))

# Micro averaging precision
mic_precision = precision_score(datalist_true, datalist_pred, average = 'micro')
mic_precision = digits(mic_precision*100,num)
f.write('Micro averaging precision : {}%\n'.format(mic_precision))

# Macro averaging recall
recall_macro = recall_score(datalist_true, datalist_pred, average = 'macro')
recall_macro = digits(recall_macro*100, num)
f.write('\nMacro averaging recall : {}%\n'.format(recall_macro))

# Micro averaging recall
recall_micro = recall_score(datalist_true, datalist_pred, average = 'micro')
recall_micro = digits(recall_micro*100, num)
f.write('Micro averaging recall : {}%\n'.format(recall_micro))

# Macro averaging f1-score
f1_macro = f1_score(datalist_true, datalist_pred, average = 'macro')
f1_macro = digits(f1_macro*100, num)
f.write('\nMacro averaging f1-score : {}%\n'.format(f1_macro))

# Micro averaging f1-score
f1_micro = f1_score(datalist_true, datalist_pred, average = 'micro')
f1_micro = digits(f1_micro*100, num)
f.write('Micro averaging f1-score : {}%\n'.format(f1_micro))

f.close()
from google.colab import drive
drive.mount('/content/drive')